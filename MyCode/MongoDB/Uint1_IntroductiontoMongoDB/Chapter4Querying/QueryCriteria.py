"""
第四章 查询
    本章将详细介绍查询。主要会涵盖一下几个方南：
        - 使用find或者findOne函数和查询文档对数据库执行查询；
        - 使用$条件查询实现范围查询、数据集合包含查询、不等式查询，以及其他一些查询；
        - 查询会返回一个数据库游标，游标只会在你需要时才将需要的文档批量返回；
        - 还有很多针对游标执行的员操作，包括忽略一定数量的结果，或者限定返回结果的数量，以及对结果的排序。

    4.2 查询条件
        查询不仅能像前面说的那样精确匹配，还能匹配更加复杂的条件，比如范围、OR子句和取反

        4.2.1 查询条件
            "$lt"、"$lte"、"$gt"和"$gte"就是全部的比较操作符，分别对应<、<=、>和>=。可以将其组合起来一边查找一个范围的值
            。例如，查询18-30岁(含)的用户，就像下面这样
                > db.users.find({"age": {"$gte": 18, "$lte": 30}})
            这样就可以找到age字段大于等于18、小于等于30的所有文档。

            这样的查询对日期尤为有用。例如，要查找在2007年1月1日前注册的人，可以向下面这样：
                > start = new Date("01/01/2007")
                > db.users.find({"registered": {"$lt": start}})
            对于日期进行精确匹配，但是用处不大，因为文档中的日期是精确到毫秒的。而我们通常是想得到一天、一周或者一个月的
            数据，这样的话，使用范围查询就很有必要了。

            对于文档的键值不等于某个特定值的情况，就要使用另外一种条件操作符"$ne"了，它表示“不相等”。若想要查询所有名
            字不为joe的用户，可以像下面这样查询：
                > db.users.find({"username": {"$ne": "joe"}})

        4.2.2 OR查询
            MongoDB 中有两种方式进行OR查询："$in"可以用来查询一个键的多个值；"$or"更通用一些，可以在多个键中查询任意的给
            定值。

            如果一个键需要与多个值进行匹配的话，就要用"$in"操作符，再加一个条件数组。例如，抽奖活动的中奖号码是725、542和
            390.要找出全部的中奖文档的话，就可以构建如下的查询：
                > db.raffle.find({"ticket_no": {"$in": [725, 542, 390]}})

            与"$in"相对的是"$nin"，"$nin"将返回与数组中所有条件都不匹配的文档。要是想返回所有没有中奖的人，就可以用如下的
            方法进行查询:
                > db.raffle.find({"ticket_no": {"$nin": [725, 542, 390]}})


            "in"能对单个键做OR查询，但是要想找到"ticket_no"为725或者"winner"为true的文档该怎么办尼？对于这种情况，应该使
            用"$or"。
                > db.raffle.find({"$or": [{"ticket_no": 725}, {"winner": true}]})

                > db.raffle.find({"$or": [{"ticket_no": {"$in": [725, 542, 390]}},
                                        {"winner": true}]})

        4.2.3 $not

        4.2.4 条件语义
            如果比较一下上一章的更新修改器和前面的查询文档，会发现以$开头的键位于在不同的位置。在查询中，"$lt"在内层文档
            ，而更新中"$inc"则是外层文档的键。基本可以肯定：条件语句是内层文档的键，而修改器是外层文档的键。

"""