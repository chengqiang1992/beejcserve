"""
第四章 查询
    本章将详细介绍查询。主要会涵盖一下几个方南：
        - 使用find或者findOne函数和查询文档对数据库执行查询；
        - 使用$条件查询实现范围查询、数据集合包含查询、不等式查询，以及其他一些查询；
        - 查询会返回一个数据库游标，游标只会在你需要时才将需要的文档批量返回；
        - 还有很多针对游标执行的员操作，包括忽略一定数量的结果，或者限定返回结果的数量，以及对结果的排序。

    4.1 find简介
        MongoDB中使用find来进行查询。查询就是返回一个集合中文档的子集，子集的范围从0个文档到整个集合。find的第一个参数决
        定了要返回那些文档，这个参数是一个文档，用于指定查询条件。

        空的查询文档（例如{}）会匹配集合的全部内容。默认为空
            > db.users.find()
        开始向查询文档中添加键值对时，就意味着限定了查询条件。
            > db.users.find({"age": 27})
        可以向查询文档中添加多个键值对，将对个查询条件组合一起，这样的查询条件会被解释成“条件1 AND 条件2 AND ... AND 条
        件N”
            > db.user.find({"username": "joe", "age": 27})

        4.1.1 指定需要返回的键
            有时候并不需要将文档所有键值对都返回。遇到这种情况，可以通过find(或者findOne)的第二个参数来指定想要返回的键。
            这样做机会节省传输的数据量，又能节省客户端解码文档的时间和内存消耗。
                > db.users.find({}, {"username": 1, "email": 1})        默认情况下"_id"这个键总是被返回，即便是没有指定

            也可以用第二个参数来剔除查询结果中的某些键值对。例如，不希望结果中含有"fatal_weakness"键
                > db.users.find({}, {"fatal_weakness": 0})
            使用这种方式，甚至可以剔除"_id"
                > db.users.find({}, {"username": 1, "_id": 0})

        4.1.2 限制
            查询使用上有些限制。传递给数据库的查询文档的值必须是常量。也就是不能引用该文档中其他的键的值。
"""