"""
2.6 数据类型
    2.6.1 基本数据类型
            MongoDB在保留JSON基本键/值对特性的基础上，添加了其他一些数据类型。

            - null
                null 用于表示空值或者不存在的字段: {"x" : null}
            - 布尔型
                布尔类型有两个值 true 和 false: {"x" : true}
            - 数值
                shell 默认使用64位浮点型数值。因此，以下数值在shell中是很“正常”的: {"x" : 3.14} 或: {"x" : 3}
                对于整数值，可使用 NumberInt 类 （表示4字节带符号证书） 或 NumberLong 类（表示8字节带符号整数），分别举例
                如下:
                    {"x" : NumberInt("3")}
                    {"x" : NumberLong("4")}
            - 字符串
                UTF-8字符串都可以表示为字符串类型的数据: {"x" : "foobar"}
            - 日期
                日期被存储为自新纪元以来经过的毫秒数，不存储时区: {"x" : new Date()}
            - 正则表达式
                查询时，使用正则表达式作为限定条件，语法也与 JavaScript 的正则表达式语法相同: {"x" : /foobar/i}
            - 数组
                数据列表或数据集可以表示为数组: {"x" : ["a", "b", "c"]}
            - 内嵌文档
                文档可嵌套其他文档，被嵌套的文档作为父文档的值: {"x" : {"foo" : "bar"}}
            - 对象id
                对象 id 是一个12字节的ID，是文档的唯一标识。详见 2.6.5节。 {"x" : Object()}
            还有一些不那么常用，但可能有需要的类型，包括下面这些。
            - 二进制数据
                二进制数据是一个任意字节的字符串。他不能直接写在shell中使用。如果要将非 UTF-8 字符串保存到数据库中，
                二进制数据是唯一的方式。
            - 代码
                查询和文档中可以包括任意 JavaScript 代码: {"x" : function() { /* ... */ }}

    2.6.2 日期
            在 JavaScript 中，Date类可以用作 MongoDB 的日期类型。穿件日期对象时，应使用 new Date(...)，而非 Date(...)。
            如果将构造函数 (constructor) 作为函数进行调用（即不包括new方式），返回的是日期的字符串表示，而非日期对象。
            这个结果与 MongoDB 无关，是 JavaScript 的工作机制决定的。如果不注意这一点，没有使用日期构造函数，将得到一堆
            混乱的日期对象和日期的字符串。由于日期和字符串之间无法匹配，所以执行删除、更新以及查询等几乎所有操作时会导致
            很多问题。

    2.6.3 数组
            数组是一组值，他既能作为有序对象（如列表、栈或队列），也能作为无序对象（如数据集）来操作。
            在下面的文档中，"things" 这个键的值就是一个数组: {"things" : ["pie". 3.14]}

            实际上，常规键值对支持的所有值都可以作为数组的值，数组中甚至可以嵌套数组。

            MongoDB 可以使用原子更新对数组内容进行修改，比如深入数组内部将 pie 改为 pi。

    2.6.4 内嵌文档
            文档作为键的值，这样的文档就是内嵌文档。

    2.6.5 _id 和 ObjectId

"""