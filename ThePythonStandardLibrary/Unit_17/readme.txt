

一些名词和概念

    Scale-up vs Scale-out
        Scale-up：纵向扩展（垂直扩展），指以提升单机硬件以及软件优化性能的方式，以扩展服务能力。Scale-up主要关注点为成本。
        Scale-out：横向扩展（水平扩展），主要指在分布式的架构下增加服务节点，以扩展服务能力。Scale-out主要关注点为整体服务能力。

    C10K/C10M
        C10K问题是上世纪提出的问题，大概意思是单机的瓶颈是“并发数1万”，即10K；锁着计算机硬件以及算法的发展，现在C10K早
        已不是问题，新的问题是C10M，即“并发数1000万”。

    OPPC模式
        One-Process-Per-connection，顾名思义，一个连接占用一个进程/线程
        > 请注意不是给每一个连接创建一个进程/线程，因为进程/线程是可以复用的。

    Event-Driven
        所谓事件驱动，就是由事件驱动资源。用编程语言来说就是发生什么事件（如点击鼠标），即调用什么函数（如关闭窗口）。
        Event-Driven本来被大量的用于C端（windows，JavaScript），目前也被在S端广泛使用。
        > Event-Driven都是异步的，当事件发生的时候需要调用回调事先定义好的方法(Callback)。
        > 异步意味这非线性，这是违法人类正常思维模式的，这意味着复杂。

    进程 vs 线程 vs 协程
        进程(process)，是操作系统上运行程序的实体。进程曾经是分时系统的基本运作单元。线程(thread)，是操作系统能够进行运算
        调度的最小单元。它被包含在进程之中，是进程中的实际运作单位，一个进程中可以并发多个线程，每条线程并行执行不同的任务。

        > 进程以及线程归操作系统调度，用ps,top等命令都可以用来显示进程/线程信息。

        协程(coroutine)，是可以被用户（程序）调度的一段代码流（有的文章干脆说是“用户态的线程”）。或者换一种说法：本质上，
        一个子函数就是一个协程

        > 简单说，可以把协程理解为不需要context-switch的线程，因此在对于系统的开销上，进程>线程>协程，一个线程可以轻松创建
        百万级的协程。

        > 协程可以让工程师轻松的以同步的方式写出非组塞的程序（本质还是异步，但是异步被“封装”了）

        常见协程

                     平台                  名称
                    Golang              goroutime
                    Erlang              process
                    Lua                 coroutine
                    Python              coroutine
                    C#                  fiber
                    Scala               actor

    同步/异步 vs 阻塞/非阻塞
